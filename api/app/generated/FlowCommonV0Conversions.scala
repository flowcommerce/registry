/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.58
 * apidoc:0.11.32 http://www.apidoc.me/flow/common/0.0.58/anorm_2_x_parsers
 */
package io.flow.common.v0.anorm.conversions {

  import anorm.{Column, MetaDataItem, TypeDoesNotMatch}
  import play.api.libs.json.{JsArray, JsObject, JsValue}
  import scala.util.{Failure, Success, Try}

  /**
    * Conversions to collections of objects using JSON.
    */
  object Util {

    def parser[T](
      f: play.api.libs.json.JsValue => T
    ) = anorm.Column.nonNull { (value, meta) =>
      val MetaDataItem(qualified, nullable, clazz) = meta
      value match {
        case json: org.postgresql.util.PGobject => {
          Try {
            f(
              play.api.libs.json.Json.parse(
                json.getValue
              )
            )
          } match {
            case Success(result) => Right(result)
            case Failure(ex) => Left(
              TypeDoesNotMatch(
                s"Column[$qualified] error parsing json $value: $ex"
              )
            )
          }
        }
        case _=> {
          Left(
            TypeDoesNotMatch(
              s"Column[$qualified] error converting $value: ${value.asInstanceOf[AnyRef].getClass} to Json"
            )
          )
        }


      }
    }

  }

  object Types {
    import io.flow.common.v0.models.json._
    implicit val columnToSeqCommonCalendar: Column[Seq[_root_.io.flow.common.v0.models.Calendar]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Calendar]] }
    implicit val columnToMapCommonCalendar: Column[Map[String, _root_.io.flow.common.v0.models.Calendar]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Calendar]] }
    implicit val columnToSeqCommonCapability: Column[Seq[_root_.io.flow.common.v0.models.Capability]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Capability]] }
    implicit val columnToMapCommonCapability: Column[Map[String, _root_.io.flow.common.v0.models.Capability]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Capability]] }
    implicit val columnToSeqCommonChangeType: Column[Seq[_root_.io.flow.common.v0.models.ChangeType]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.ChangeType]] }
    implicit val columnToMapCommonChangeType: Column[Map[String, _root_.io.flow.common.v0.models.ChangeType]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.ChangeType]] }
    implicit val columnToSeqCommonEnvironment: Column[Seq[_root_.io.flow.common.v0.models.Environment]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Environment]] }
    implicit val columnToMapCommonEnvironment: Column[Map[String, _root_.io.flow.common.v0.models.Environment]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Environment]] }
    implicit val columnToSeqCommonExceptionType: Column[Seq[_root_.io.flow.common.v0.models.ExceptionType]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.ExceptionType]] }
    implicit val columnToMapCommonExceptionType: Column[Map[String, _root_.io.flow.common.v0.models.ExceptionType]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.ExceptionType]] }
    implicit val columnToSeqCommonHolidayCalendar: Column[Seq[_root_.io.flow.common.v0.models.HolidayCalendar]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.HolidayCalendar]] }
    implicit val columnToMapCommonHolidayCalendar: Column[Map[String, _root_.io.flow.common.v0.models.HolidayCalendar]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.HolidayCalendar]] }
    implicit val columnToSeqCommonMeasurementSystem: Column[Seq[_root_.io.flow.common.v0.models.MeasurementSystem]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.MeasurementSystem]] }
    implicit val columnToMapCommonMeasurementSystem: Column[Map[String, _root_.io.flow.common.v0.models.MeasurementSystem]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.MeasurementSystem]] }
    implicit val columnToSeqCommonRole: Column[Seq[_root_.io.flow.common.v0.models.Role]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Role]] }
    implicit val columnToMapCommonRole: Column[Map[String, _root_.io.flow.common.v0.models.Role]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Role]] }
    implicit val columnToSeqCommonScheduleExceptionStatus: Column[Seq[_root_.io.flow.common.v0.models.ScheduleExceptionStatus]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.ScheduleExceptionStatus]] }
    implicit val columnToMapCommonScheduleExceptionStatus: Column[Map[String, _root_.io.flow.common.v0.models.ScheduleExceptionStatus]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.ScheduleExceptionStatus]] }
    implicit val columnToSeqCommonSortDirection: Column[Seq[_root_.io.flow.common.v0.models.SortDirection]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.SortDirection]] }
    implicit val columnToMapCommonSortDirection: Column[Map[String, _root_.io.flow.common.v0.models.SortDirection]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.SortDirection]] }
    implicit val columnToSeqCommonUnitOfMeasurement: Column[Seq[_root_.io.flow.common.v0.models.UnitOfMeasurement]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.UnitOfMeasurement]] }
    implicit val columnToMapCommonUnitOfMeasurement: Column[Map[String, _root_.io.flow.common.v0.models.UnitOfMeasurement]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.UnitOfMeasurement]] }
    implicit val columnToSeqCommonUnitOfTime: Column[Seq[_root_.io.flow.common.v0.models.UnitOfTime]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.UnitOfTime]] }
    implicit val columnToMapCommonUnitOfTime: Column[Map[String, _root_.io.flow.common.v0.models.UnitOfTime]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.UnitOfTime]] }
    implicit val columnToSeqCommonValueAddedService: Column[Seq[_root_.io.flow.common.v0.models.ValueAddedService]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.ValueAddedService]] }
    implicit val columnToMapCommonValueAddedService: Column[Map[String, _root_.io.flow.common.v0.models.ValueAddedService]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.ValueAddedService]] }
    implicit val columnToSeqCommonVisibility: Column[Seq[_root_.io.flow.common.v0.models.Visibility]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Visibility]] }
    implicit val columnToMapCommonVisibility: Column[Map[String, _root_.io.flow.common.v0.models.Visibility]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Visibility]] }
    implicit val columnToSeqCommonContact: Column[Seq[_root_.io.flow.common.v0.models.Contact]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Contact]] }
    implicit val columnToMapCommonContact: Column[Map[String, _root_.io.flow.common.v0.models.Contact]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Contact]] }
    implicit val columnToSeqCommonCustomer: Column[Seq[_root_.io.flow.common.v0.models.Customer]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Customer]] }
    implicit val columnToMapCommonCustomer: Column[Map[String, _root_.io.flow.common.v0.models.Customer]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Customer]] }
    implicit val columnToSeqCommonDatetimeRange: Column[Seq[_root_.io.flow.common.v0.models.DatetimeRange]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.DatetimeRange]] }
    implicit val columnToMapCommonDatetimeRange: Column[Map[String, _root_.io.flow.common.v0.models.DatetimeRange]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.DatetimeRange]] }
    implicit val columnToSeqCommonDimension: Column[Seq[_root_.io.flow.common.v0.models.Dimension]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Dimension]] }
    implicit val columnToMapCommonDimension: Column[Map[String, _root_.io.flow.common.v0.models.Dimension]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Dimension]] }
    implicit val columnToSeqCommonDimensions: Column[Seq[_root_.io.flow.common.v0.models.Dimensions]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Dimensions]] }
    implicit val columnToMapCommonDimensions: Column[Map[String, _root_.io.flow.common.v0.models.Dimensions]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Dimensions]] }
    implicit val columnToSeqCommonError: Column[Seq[_root_.io.flow.common.v0.models.Error]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Error]] }
    implicit val columnToMapCommonError: Column[Map[String, _root_.io.flow.common.v0.models.Error]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Error]] }
    implicit val columnToSeqCommonException: Column[Seq[_root_.io.flow.common.v0.models.Exception]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Exception]] }
    implicit val columnToMapCommonException: Column[Map[String, _root_.io.flow.common.v0.models.Exception]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Exception]] }
    implicit val columnToSeqCommonExperienceSummary: Column[Seq[_root_.io.flow.common.v0.models.ExperienceSummary]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.ExperienceSummary]] }
    implicit val columnToMapCommonExperienceSummary: Column[Map[String, _root_.io.flow.common.v0.models.ExperienceSummary]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.ExperienceSummary]] }
    implicit val columnToSeqCommonHealthcheck: Column[Seq[_root_.io.flow.common.v0.models.Healthcheck]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Healthcheck]] }
    implicit val columnToMapCommonHealthcheck: Column[Map[String, _root_.io.flow.common.v0.models.Healthcheck]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Healthcheck]] }
    implicit val columnToSeqCommonLocation: Column[Seq[_root_.io.flow.common.v0.models.Location]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Location]] }
    implicit val columnToMapCommonLocation: Column[Map[String, _root_.io.flow.common.v0.models.Location]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Location]] }
    implicit val columnToSeqCommonLocationReference: Column[Seq[_root_.io.flow.common.v0.models.LocationReference]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.LocationReference]] }
    implicit val columnToMapCommonLocationReference: Column[Map[String, _root_.io.flow.common.v0.models.LocationReference]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.LocationReference]] }
    implicit val columnToSeqCommonMeasurement: Column[Seq[_root_.io.flow.common.v0.models.Measurement]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Measurement]] }
    implicit val columnToMapCommonMeasurement: Column[Map[String, _root_.io.flow.common.v0.models.Measurement]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Measurement]] }
    implicit val columnToSeqCommonName: Column[Seq[_root_.io.flow.common.v0.models.Name]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Name]] }
    implicit val columnToMapCommonName: Column[Map[String, _root_.io.flow.common.v0.models.Name]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Name]] }
    implicit val columnToSeqCommonOrganization: Column[Seq[_root_.io.flow.common.v0.models.Organization]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Organization]] }
    implicit val columnToMapCommonOrganization: Column[Map[String, _root_.io.flow.common.v0.models.Organization]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Organization]] }
    implicit val columnToSeqCommonOrganizationReference: Column[Seq[_root_.io.flow.common.v0.models.OrganizationReference]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.OrganizationReference]] }
    implicit val columnToMapCommonOrganizationReference: Column[Map[String, _root_.io.flow.common.v0.models.OrganizationReference]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.OrganizationReference]] }
    implicit val columnToSeqCommonOrganizationSummary: Column[Seq[_root_.io.flow.common.v0.models.OrganizationSummary]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.OrganizationSummary]] }
    implicit val columnToMapCommonOrganizationSummary: Column[Map[String, _root_.io.flow.common.v0.models.OrganizationSummary]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.OrganizationSummary]] }
    implicit val columnToSeqCommonPrice: Column[Seq[_root_.io.flow.common.v0.models.Price]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Price]] }
    implicit val columnToMapCommonPrice: Column[Map[String, _root_.io.flow.common.v0.models.Price]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Price]] }
    implicit val columnToSeqCommonPriceForm: Column[Seq[_root_.io.flow.common.v0.models.PriceForm]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.PriceForm]] }
    implicit val columnToMapCommonPriceForm: Column[Map[String, _root_.io.flow.common.v0.models.PriceForm]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.PriceForm]] }
    implicit val columnToSeqCommonSchedule: Column[Seq[_root_.io.flow.common.v0.models.Schedule]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Schedule]] }
    implicit val columnToMapCommonSchedule: Column[Map[String, _root_.io.flow.common.v0.models.Schedule]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Schedule]] }
    implicit val columnToSeqCommonUser: Column[Seq[_root_.io.flow.common.v0.models.User]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.User]] }
    implicit val columnToMapCommonUser: Column[Map[String, _root_.io.flow.common.v0.models.User]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.User]] }
    implicit val columnToSeqCommonUserReference: Column[Seq[_root_.io.flow.common.v0.models.UserReference]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.UserReference]] }
    implicit val columnToMapCommonUserReference: Column[Map[String, _root_.io.flow.common.v0.models.UserReference]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.UserReference]] }
    implicit val columnToSeqCommonUserSummary: Column[Seq[_root_.io.flow.common.v0.models.UserSummary]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.UserSummary]] }
    implicit val columnToMapCommonUserSummary: Column[Map[String, _root_.io.flow.common.v0.models.UserSummary]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.UserSummary]] }
    implicit val columnToSeqCommonExpandableLocation: Column[Seq[_root_.io.flow.common.v0.models.ExpandableLocation]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.ExpandableLocation]] }
    implicit val columnToMapCommonExpandableLocation: Column[Map[String, _root_.io.flow.common.v0.models.ExpandableLocation]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.ExpandableLocation]] }
    implicit val columnToSeqCommonExpandableOrganization: Column[Seq[_root_.io.flow.common.v0.models.ExpandableOrganization]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.ExpandableOrganization]] }
    implicit val columnToMapCommonExpandableOrganization: Column[Map[String, _root_.io.flow.common.v0.models.ExpandableOrganization]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.ExpandableOrganization]] }
    implicit val columnToSeqCommonExpandableUser: Column[Seq[_root_.io.flow.common.v0.models.ExpandableUser]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.ExpandableUser]] }
    implicit val columnToMapCommonExpandableUser: Column[Map[String, _root_.io.flow.common.v0.models.ExpandableUser]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.ExpandableUser]] }
  }

  object Standard {
    implicit val columnToJsObject: Column[play.api.libs.json.JsObject] = Util.parser { _.as[play.api.libs.json.JsObject] }
    implicit val columnToSeqBoolean: Column[Seq[Boolean]] = Util.parser { _.as[Seq[Boolean]] }
    implicit val columnToMapBoolean: Column[Map[String, Boolean]] = Util.parser { _.as[Map[String, Boolean]] }
    implicit val columnToSeqDouble: Column[Seq[Double]] = Util.parser { _.as[Seq[Double]] }
    implicit val columnToMapDouble: Column[Map[String, Double]] = Util.parser { _.as[Map[String, Double]] }
    implicit val columnToSeqInt: Column[Seq[Int]] = Util.parser { _.as[Seq[Int]] }
    implicit val columnToMapInt: Column[Map[String, Int]] = Util.parser { _.as[Map[String, Int]] }
    implicit val columnToSeqLong: Column[Seq[Long]] = Util.parser { _.as[Seq[Long]] }
    implicit val columnToMapLong: Column[Map[String, Long]] = Util.parser { _.as[Map[String, Long]] }
    implicit val columnToSeqLocalDate: Column[Seq[_root_.org.joda.time.LocalDate]] = Util.parser { _.as[Seq[_root_.org.joda.time.LocalDate]] }
    implicit val columnToMapLocalDate: Column[Map[String, _root_.org.joda.time.LocalDate]] = Util.parser { _.as[Map[String, _root_.org.joda.time.LocalDate]] }
    implicit val columnToSeqDateTime: Column[Seq[_root_.org.joda.time.DateTime]] = Util.parser { _.as[Seq[_root_.org.joda.time.DateTime]] }
    implicit val columnToMapDateTime: Column[Map[String, _root_.org.joda.time.DateTime]] = Util.parser { _.as[Map[String, _root_.org.joda.time.DateTime]] }
    implicit val columnToSeqBigDecimal: Column[Seq[BigDecimal]] = Util.parser { _.as[Seq[BigDecimal]] }
    implicit val columnToMapBigDecimal: Column[Map[String, BigDecimal]] = Util.parser { _.as[Map[String, BigDecimal]] }
    implicit val columnToSeqJsObject: Column[Seq[_root_.play.api.libs.json.JsObject]] = Util.parser { _.as[Seq[_root_.play.api.libs.json.JsObject]] }
    implicit val columnToMapJsObject: Column[Map[String, _root_.play.api.libs.json.JsObject]] = Util.parser { _.as[Map[String, _root_.play.api.libs.json.JsObject]] }
    implicit val columnToSeqString: Column[Seq[String]] = Util.parser { _.as[Seq[String]] }
    implicit val columnToMapString: Column[Map[String, String]] = Util.parser { _.as[Map[String, String]] }
    implicit val columnToSeqUUID: Column[Seq[_root_.java.util.UUID]] = Util.parser { _.as[Seq[_root_.java.util.UUID]] }
    implicit val columnToMapUUID: Column[Map[String, _root_.java.util.UUID]] = Util.parser { _.as[Map[String, _root_.java.util.UUID]] }
  }

}