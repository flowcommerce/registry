/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.3.41
 * apibuilder 0.14.93 app.apibuilder.io/flow/registry/latest/play_2_8_client
 */
package io.flow.registry.v0.models {

  sealed trait Healthcheck extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type Healthcheck
   */
  sealed trait HealthcheckDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object HealthcheckDiscriminator {

    case object Http extends HealthcheckDiscriminator { override def toString = "http" }
    case object Postgresql extends HealthcheckDiscriminator { override def toString = "postgresql" }

    final case class UNDEFINED(override val toString: String) extends HealthcheckDiscriminator

    val all: scala.List[HealthcheckDiscriminator] = scala.List(Http, Postgresql)

    private[this] val byName: Map[String, HealthcheckDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): HealthcheckDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[HealthcheckDiscriminator] = byName.get(value.toLowerCase)

  }

  /**
   * @param ports All of the ports assigned to this application
   * @param dependencies A list of the direct dependencies of this application. Guaranteed to be
   *        non-cyclical over the set of all applications.
   */
  final case class Application(
    id: String,
    ports: Seq[io.flow.registry.v0.models.Port],
    dependencies: Seq[String]
  )

  /**
   * @param external The external port number to allocate to this application. Defaults to a unique
   *        port assigned by the registry.
   * @param internal The internal port number that this application runs on. Defaults to the
   *        service's default port number.
   * @param dependency The application IDs on which this application is dependent
   */
  final case class ApplicationForm(
    id: String,
    service: String,
    external: _root_.scala.Option[Long] = None,
    internal: _root_.scala.Option[Long] = None,
    dependency: _root_.scala.Option[Seq[String]] = None
  )

  final case class ApplicationPutForm(
    service: _root_.scala.Option[String] = None,
    external: _root_.scala.Option[Long] = None,
    internal: _root_.scala.Option[Long] = None,
    dependency: _root_.scala.Option[Seq[String]] = None
  )

  final case class ApplicationVersion(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType,
    application: io.flow.registry.v0.models.Application
  )

  /**
   * @param port The port on which clients access this service.
   */
  final case class Http(
    host: String,
    port: Long
  ) extends Healthcheck

  /**
   * @param external The port on which clients access this service. If running in a container, this
   *        is the host port.
   * @param internal The port on which this service is running internally. If running in a container,
   *        this is the port inside the container.
   */
  final case class Port(
    service: io.flow.registry.v0.models.ServiceReference,
    external: Long,
    internal: Long
  )

  /**
   * @param dbname The database name.
   * @param port The port on which clients access this database.
   */
  final case class Postgresql(
    dbname: String,
    host: String,
    port: Long,
    user: String
  ) extends Healthcheck

  /**
   * A service is used to identify what type of software is actually running. We use
   * this to enable setting up application types with enough configuration info by
   * default to support our use cases around docker, CI, etc. The name service comes
   * from
   * https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
   */
  final case class Service(
    id: String,
    defaultPort: Long
  )

  final case class ServiceForm(
    id: String,
    defaultPort: Long
  )

  final case class ServicePutForm(
    defaultPort: Long
  )

  final case class ServiceReference(
    id: String
  )

  final case class ServiceVersion(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType,
    service: io.flow.registry.v0.models.Service
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Healthcheck, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   *
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  final case class HealthcheckUndefinedType(
    description: String
  ) extends Healthcheck

}

package io.flow.registry.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.registry.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID = new Writes[_root_.java.util.UUID] {
      def writes(x: _root_.java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[_root_.org.joda.time.DateTime] {
      def writes(x: _root_.org.joda.time.DateTime) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
      }
    }

    private[v0] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate = new Writes[_root_.org.joda.time.LocalDate] {
      def writes(x: _root_.org.joda.time.LocalDate) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
      }
    }

    implicit def jsonReadsRegistryApplication: play.api.libs.json.Reads[Application] = {
      for {
        id <- (__ \ "id").read[String]
        ports <- (__ \ "ports").read[Seq[io.flow.registry.v0.models.Port]]
        dependencies <- (__ \ "dependencies").read[Seq[String]]
      } yield Application(id, ports, dependencies)
    }

    def jsObjectApplication(obj: io.flow.registry.v0.models.Application): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "ports" -> play.api.libs.json.Json.toJson(obj.ports),
        "dependencies" -> play.api.libs.json.Json.toJson(obj.dependencies)
      )
    }

    implicit def jsonWritesRegistryApplication: play.api.libs.json.Writes[Application] = {
      new play.api.libs.json.Writes[io.flow.registry.v0.models.Application] {
        def writes(obj: io.flow.registry.v0.models.Application) = {
          jsObjectApplication(obj)
        }
      }
    }

    implicit def jsonReadsRegistryApplicationForm: play.api.libs.json.Reads[ApplicationForm] = {
      for {
        id <- (__ \ "id").read[String]
        service <- (__ \ "service").read[String]
        external <- (__ \ "external").readNullable[Long]
        internal <- (__ \ "internal").readNullable[Long]
        dependency <- (__ \ "dependency").readNullable[Seq[String]]
      } yield ApplicationForm(id, service, external, internal, dependency)
    }

    def jsObjectApplicationForm(obj: io.flow.registry.v0.models.ApplicationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "service" -> play.api.libs.json.JsString(obj.service)
      ) ++ (obj.external match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("external" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.internal match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("internal" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.dependency match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("dependency" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesRegistryApplicationForm: play.api.libs.json.Writes[ApplicationForm] = {
      new play.api.libs.json.Writes[io.flow.registry.v0.models.ApplicationForm] {
        def writes(obj: io.flow.registry.v0.models.ApplicationForm) = {
          jsObjectApplicationForm(obj)
        }
      }
    }

    implicit def jsonReadsRegistryApplicationPutForm: play.api.libs.json.Reads[ApplicationPutForm] = {
      for {
        service <- (__ \ "service").readNullable[String]
        external <- (__ \ "external").readNullable[Long]
        internal <- (__ \ "internal").readNullable[Long]
        dependency <- (__ \ "dependency").readNullable[Seq[String]]
      } yield ApplicationPutForm(service, external, internal, dependency)
    }

    def jsObjectApplicationPutForm(obj: io.flow.registry.v0.models.ApplicationPutForm): play.api.libs.json.JsObject = {
      (obj.service match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("service" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.external match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("external" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.internal match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("internal" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.dependency match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("dependency" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesRegistryApplicationPutForm: play.api.libs.json.Writes[ApplicationPutForm] = {
      new play.api.libs.json.Writes[io.flow.registry.v0.models.ApplicationPutForm] {
        def writes(obj: io.flow.registry.v0.models.ApplicationPutForm) = {
          jsObjectApplicationPutForm(obj)
        }
      }
    }

    implicit def jsonReadsRegistryApplicationVersion: play.api.libs.json.Reads[ApplicationVersion] = {
      for {
        id <- (__ \ "id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        `type` <- (__ \ "type").read[io.flow.common.v0.models.ChangeType]
        application <- (__ \ "application").read[io.flow.registry.v0.models.Application]
      } yield ApplicationVersion(id, timestamp, `type`, application)
    }

    def jsObjectApplicationVersion(obj: io.flow.registry.v0.models.ApplicationVersion): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "application" -> jsObjectApplication(obj.application)
      )
    }

    implicit def jsonWritesRegistryApplicationVersion: play.api.libs.json.Writes[ApplicationVersion] = {
      new play.api.libs.json.Writes[io.flow.registry.v0.models.ApplicationVersion] {
        def writes(obj: io.flow.registry.v0.models.ApplicationVersion) = {
          jsObjectApplicationVersion(obj)
        }
      }
    }

    implicit def jsonReadsRegistryHttp: play.api.libs.json.Reads[Http] = {
      for {
        host <- (__ \ "host").read[String]
        port <- (__ \ "port").read[Long]
      } yield Http(host, port)
    }

    def jsObjectHttp(obj: io.flow.registry.v0.models.Http): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "host" -> play.api.libs.json.JsString(obj.host),
        "port" -> play.api.libs.json.JsNumber(obj.port)
      ) ++ play.api.libs.json.Json.obj("discriminator" -> "http")
    }

    implicit def jsonWritesRegistryHttp: play.api.libs.json.Writes[Http] = {
      new play.api.libs.json.Writes[io.flow.registry.v0.models.Http] {
        def writes(obj: io.flow.registry.v0.models.Http) = {
          jsObjectHttp(obj)
        }
      }
    }

    implicit def jsonReadsRegistryPort: play.api.libs.json.Reads[Port] = {
      for {
        service <- (__ \ "service").read[io.flow.registry.v0.models.ServiceReference]
        external <- (__ \ "external").read[Long]
        internal <- (__ \ "internal").read[Long]
      } yield Port(service, external, internal)
    }

    def jsObjectPort(obj: io.flow.registry.v0.models.Port): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "service" -> jsObjectServiceReference(obj.service),
        "external" -> play.api.libs.json.JsNumber(obj.external),
        "internal" -> play.api.libs.json.JsNumber(obj.internal)
      )
    }

    implicit def jsonWritesRegistryPort: play.api.libs.json.Writes[Port] = {
      new play.api.libs.json.Writes[io.flow.registry.v0.models.Port] {
        def writes(obj: io.flow.registry.v0.models.Port) = {
          jsObjectPort(obj)
        }
      }
    }

    implicit def jsonReadsRegistryPostgresql: play.api.libs.json.Reads[Postgresql] = {
      for {
        dbname <- (__ \ "dbname").read[String]
        host <- (__ \ "host").read[String]
        port <- (__ \ "port").read[Long]
        user <- (__ \ "user").read[String]
      } yield Postgresql(dbname, host, port, user)
    }

    def jsObjectPostgresql(obj: io.flow.registry.v0.models.Postgresql): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "dbname" -> play.api.libs.json.JsString(obj.dbname),
        "host" -> play.api.libs.json.JsString(obj.host),
        "port" -> play.api.libs.json.JsNumber(obj.port),
        "user" -> play.api.libs.json.JsString(obj.user)
      ) ++ play.api.libs.json.Json.obj("discriminator" -> "postgresql")
    }

    implicit def jsonWritesRegistryPostgresql: play.api.libs.json.Writes[Postgresql] = {
      new play.api.libs.json.Writes[io.flow.registry.v0.models.Postgresql] {
        def writes(obj: io.flow.registry.v0.models.Postgresql) = {
          jsObjectPostgresql(obj)
        }
      }
    }

    implicit def jsonReadsRegistryService: play.api.libs.json.Reads[Service] = {
      for {
        id <- (__ \ "id").read[String]
        defaultPort <- (__ \ "default_port").read[Long]
      } yield Service(id, defaultPort)
    }

    def jsObjectService(obj: io.flow.registry.v0.models.Service): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "default_port" -> play.api.libs.json.JsNumber(obj.defaultPort)
      )
    }

    implicit def jsonWritesRegistryService: play.api.libs.json.Writes[Service] = {
      new play.api.libs.json.Writes[io.flow.registry.v0.models.Service] {
        def writes(obj: io.flow.registry.v0.models.Service) = {
          jsObjectService(obj)
        }
      }
    }

    implicit def jsonReadsRegistryServiceForm: play.api.libs.json.Reads[ServiceForm] = {
      for {
        id <- (__ \ "id").read[String]
        defaultPort <- (__ \ "default_port").read[Long]
      } yield ServiceForm(id, defaultPort)
    }

    def jsObjectServiceForm(obj: io.flow.registry.v0.models.ServiceForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "default_port" -> play.api.libs.json.JsNumber(obj.defaultPort)
      )
    }

    implicit def jsonWritesRegistryServiceForm: play.api.libs.json.Writes[ServiceForm] = {
      new play.api.libs.json.Writes[io.flow.registry.v0.models.ServiceForm] {
        def writes(obj: io.flow.registry.v0.models.ServiceForm) = {
          jsObjectServiceForm(obj)
        }
      }
    }

    implicit def jsonReadsRegistryServicePutForm: play.api.libs.json.Reads[ServicePutForm] = {
      (__ \ "default_port").read[Long].map { x => new ServicePutForm(defaultPort = x) }
    }

    def jsObjectServicePutForm(obj: io.flow.registry.v0.models.ServicePutForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "default_port" -> play.api.libs.json.JsNumber(obj.defaultPort)
      )
    }

    implicit def jsonWritesRegistryServicePutForm: play.api.libs.json.Writes[ServicePutForm] = {
      new play.api.libs.json.Writes[io.flow.registry.v0.models.ServicePutForm] {
        def writes(obj: io.flow.registry.v0.models.ServicePutForm) = {
          jsObjectServicePutForm(obj)
        }
      }
    }

    implicit def jsonReadsRegistryServiceReference: play.api.libs.json.Reads[ServiceReference] = {
      (__ \ "id").read[String].map { x => new ServiceReference(id = x) }
    }

    def jsObjectServiceReference(obj: io.flow.registry.v0.models.ServiceReference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonWritesRegistryServiceReference: play.api.libs.json.Writes[ServiceReference] = {
      new play.api.libs.json.Writes[io.flow.registry.v0.models.ServiceReference] {
        def writes(obj: io.flow.registry.v0.models.ServiceReference) = {
          jsObjectServiceReference(obj)
        }
      }
    }

    implicit def jsonReadsRegistryServiceVersion: play.api.libs.json.Reads[ServiceVersion] = {
      for {
        id <- (__ \ "id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        `type` <- (__ \ "type").read[io.flow.common.v0.models.ChangeType]
        service <- (__ \ "service").read[io.flow.registry.v0.models.Service]
      } yield ServiceVersion(id, timestamp, `type`, service)
    }

    def jsObjectServiceVersion(obj: io.flow.registry.v0.models.ServiceVersion): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "service" -> jsObjectService(obj.service)
      )
    }

    implicit def jsonWritesRegistryServiceVersion: play.api.libs.json.Writes[ServiceVersion] = {
      new play.api.libs.json.Writes[io.flow.registry.v0.models.ServiceVersion] {
        def writes(obj: io.flow.registry.v0.models.ServiceVersion) = {
          jsObjectServiceVersion(obj)
        }
      }
    }

    implicit def jsonReadsRegistryHealthcheck: play.api.libs.json.Reads[Healthcheck] = new play.api.libs.json.Reads[Healthcheck] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[Healthcheck] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[Healthcheck] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "http" => js.validate[io.flow.registry.v0.models.Http]
          case "postgresql" => js.validate[io.flow.registry.v0.models.Postgresql]
          case other => play.api.libs.json.JsSuccess(io.flow.registry.v0.models.HealthcheckUndefinedType(other))
        }
      }
    }

    def jsObjectHealthcheck(obj: io.flow.registry.v0.models.Healthcheck): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.registry.v0.models.Http => jsObjectHttp(x)
        case x: io.flow.registry.v0.models.Postgresql => jsObjectPostgresql(x)
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesRegistryHealthcheck: play.api.libs.json.Writes[Healthcheck] = {
      new play.api.libs.json.Writes[io.flow.registry.v0.models.Healthcheck] {
        def writes(obj: io.flow.registry.v0.models.Healthcheck) = {
          jsObjectHealthcheck(obj)
        }
      }
    }
  }
}

package io.flow.registry.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package io.flow.registry.v0 {

  object Constants {

    val BaseUrl = "https://registry.api.flow.io"
    val Namespace = "io.flow.registry.v0"
    val UserAgent = "apibuilder 0.14.93 app.apibuilder.io/flow/registry/latest/play_2_8_client"
    val Version = "0.3.41"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String = "https://registry.api.flow.io",
    auth: scala.Option[io.flow.registry.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.registry.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.registry.v0.Client")

    logger.info(s"Initializing io.flow.registry.v0.Client for url $baseUrl")

    def applications: Applications = Applications

    def services: Services = Services

    object Applications extends Applications {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        port: _root_.scala.Option[Seq[Long]] = None,
        service: _root_.scala.Option[Seq[String]] = None,
        prefix: _root_.scala.Option[String] = None,
        q: _root_.scala.Option[String] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        sort: String = "-created_at",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.registry.v0.models.Application]] = {
        val queryParameters = Seq(
          prefix.map("prefix" -> _),
          q.map("q" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          port.getOrElse(Nil).map("port" -> _.toString) ++
          service.getOrElse(Nil).map("service" -> _)

        _executeRequest("GET", s"/applications", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.registry.v0.Client.parseJson("Seq[io.flow.registry.v0.models.Application]", r, _.validate[Seq[io.flow.registry.v0.models.Application]])
          case r => throw io.flow.registry.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getVersions(
        id: _root_.scala.Option[Seq[String]] = None,
        application: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        sort: String = "journal_timestamp",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.registry.v0.models.ApplicationVersion]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          application.getOrElse(Nil).map("application" -> _)

        _executeRequest("GET", s"/applications/versions", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.registry.v0.Client.parseJson("Seq[io.flow.registry.v0.models.ApplicationVersion]", r, _.validate[Seq[io.flow.registry.v0.models.ApplicationVersion]])
          case r => throw io.flow.registry.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getYaml(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[String] = {
        _executeRequest("GET", s"/applications/yaml", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.registry.v0.Client.parseJson("String", r, _.validate[String])
          case r if r.status == 404 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.registry.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.registry.v0.models.Application] = {
        _executeRequest("GET", s"/applications/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.registry.v0.Client.parseJson("io.flow.registry.v0.models.Application", r, _.validate[io.flow.registry.v0.models.Application])
          case r if r.status == 404 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.registry.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def post(
        applicationForm: io.flow.registry.v0.models.ApplicationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.registry.v0.models.Application] = {
        val payload = play.api.libs.json.Json.toJson(applicationForm)

        _executeRequest("POST", s"/applications", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.registry.v0.Client.parseJson("io.flow.registry.v0.models.Application", r, _.validate[io.flow.registry.v0.models.Application])
          case r if r.status == 401 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.registry.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.registry.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def putById(
        id: String,
        applicationPutForm: io.flow.registry.v0.models.ApplicationPutForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.registry.v0.models.Application] = {
        val payload = play.api.libs.json.Json.toJson(applicationPutForm)

        _executeRequest("PUT", s"/applications/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.registry.v0.Client.parseJson("io.flow.registry.v0.models.Application", r, _.validate[io.flow.registry.v0.models.Application])
          case r if r.status == 201 => _root_.io.flow.registry.v0.Client.parseJson("io.flow.registry.v0.models.Application", r, _.validate[io.flow.registry.v0.models.Application])
          case r if r.status == 401 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.registry.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.registry.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/applications/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.registry.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }

      override def putDependenciesByIdAndDependency(
        id: String,
        dependency: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.registry.v0.models.Application] = {
        _executeRequest("PUT", s"/applications/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}/dependencies/${play.utils.UriEncoding.encodePathSegment(dependency, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.registry.v0.Client.parseJson("io.flow.registry.v0.models.Application", r, _.validate[io.flow.registry.v0.models.Application])
          case r if r.status == 401 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.registry.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.registry.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404, 422")
        }
      }

      override def deleteDependenciesByIdAndDependency(
        id: String,
        dependency: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.registry.v0.models.Application] = {
        _executeRequest("DELETE", s"/applications/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}/dependencies/${play.utils.UriEncoding.encodePathSegment(dependency, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.registry.v0.Client.parseJson("io.flow.registry.v0.models.Application", r, _.validate[io.flow.registry.v0.models.Application])
          case r if r.status == 401 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.registry.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.registry.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404, 422")
        }
      }
    }

    object Services extends Services {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        sort: String = "-created_at",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.registry.v0.models.Service]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/services", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.registry.v0.Client.parseJson("Seq[io.flow.registry.v0.models.Service]", r, _.validate[Seq[io.flow.registry.v0.models.Service]])
          case r if r.status == 401 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.registry.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getVersions(
        id: _root_.scala.Option[Seq[String]] = None,
        service: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        sort: String = "journal_timestamp",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.registry.v0.models.ServiceVersion]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          service.getOrElse(Nil).map("service" -> _)

        _executeRequest("GET", s"/services/versions", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.registry.v0.Client.parseJson("Seq[io.flow.registry.v0.models.ServiceVersion]", r, _.validate[Seq[io.flow.registry.v0.models.ServiceVersion]])
          case r if r.status == 401 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.registry.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.registry.v0.models.Service] = {
        _executeRequest("GET", s"/services/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.registry.v0.Client.parseJson("io.flow.registry.v0.models.Service", r, _.validate[io.flow.registry.v0.models.Service])
          case r if r.status == 401 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.registry.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        serviceForm: io.flow.registry.v0.models.ServiceForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.registry.v0.models.Service] = {
        val payload = play.api.libs.json.Json.toJson(serviceForm)

        _executeRequest("POST", s"/services", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.registry.v0.Client.parseJson("io.flow.registry.v0.models.Service", r, _.validate[io.flow.registry.v0.models.Service])
          case r if r.status == 401 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.registry.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.registry.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def putById(
        id: String,
        servicePutForm: io.flow.registry.v0.models.ServicePutForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.registry.v0.models.Service] = {
        val payload = play.api.libs.json.Json.toJson(servicePutForm)

        _executeRequest("PUT", s"/services/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.registry.v0.Client.parseJson("io.flow.registry.v0.models.Service", r, _.validate[io.flow.registry.v0.models.Service])
          case r if r.status == 201 => _root_.io.flow.registry.v0.Client.parseJson("io.flow.registry.v0.models.Service", r, _.validate[io.flow.registry.v0.models.Service])
          case r if r.status == 401 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.registry.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.registry.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/services/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.registry.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.registry.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.registry.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404, 422")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).addHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method '$url'")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' '$url'")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    ): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.registry.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    final case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def applications: io.flow.registry.v0.Applications
      def services: io.flow.registry.v0.Services
    }

  }

  trait Applications {
    /**
     * Search applications. Always paginated.
     *
     * @param port Find the application assigned this external port number
     * @param prefix Find the applications with this exact prefix (computed as the string up the last
     *        dash, of if no dash, the full string)
     * @param q Arbitrary query search. Case insensitive
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      port: _root_.scala.Option[Seq[Long]] = None,
      service: _root_.scala.Option[Seq[String]] = None,
      prefix: _root_.scala.Option[String] = None,
      q: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "-created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.registry.v0.models.Application]]

    /**
     * Provides visibility into recent changes of each application, including deletion
     *
     * @param application Filter to applications with any one of these ids.
     */
    def getVersions(
      id: _root_.scala.Option[Seq[String]] = None,
      application: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "journal_timestamp",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.registry.v0.models.ApplicationVersion]]

    /**
     * Returns YAML representation of applications.
     */
    def getYaml(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[String]

    /**
     * Returns information about a specific application.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.registry.v0.models.Application]

    /**
     * Create a new application.
     */
    def post(
      applicationForm: io.flow.registry.v0.models.ApplicationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.registry.v0.models.Application]

    /**
     * Upsert an application with the specified id.
     */
    def putById(
      id: String,
      applicationPutForm: io.flow.registry.v0.models.ApplicationPutForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.registry.v0.models.Application]

    /**
     * Delete the application with this id
     */
    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    /**
     * Ensure that name is a dependencies for this project, adding if necessary.
     */
    def putDependenciesByIdAndDependency(
      id: String,
      dependency: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.registry.v0.models.Application]

    /**
     * Remove name as a dependencies for this project
     */
    def deleteDependenciesByIdAndDependency(
      id: String,
      dependency: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.registry.v0.models.Application]
  }

  trait Services {
    /**
     * Search services. Always paginated.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "-created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.registry.v0.models.Service]]

    /**
     * Provides visibility into recent changes of each service, including deletion
     *
     * @param service Filter to services with any one of these ids.
     */
    def getVersions(
      id: _root_.scala.Option[Seq[String]] = None,
      service: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      sort: String = "journal_timestamp",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.registry.v0.models.ServiceVersion]]

    /**
     * Returns information about a specific service.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.registry.v0.models.Service]

    /**
     * Create a new service.
     */
    def post(
      serviceForm: io.flow.registry.v0.models.ServiceForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.registry.v0.models.Service]

    /**
     * Upsert an service with the specified id.
     */
    def putById(
      id: String,
      servicePutForm: io.flow.registry.v0.models.ServicePutForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.registry.v0.models.Service]

    /**
     * Delete the service with this id
     */
    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  package errors {

    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.registry.v0.models.json._

    final case class GenericErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val genericError = _root_.io.flow.registry.v0.Client.parseJson("io.flow.error.v0.models.GenericError", response, _.validate[io.flow.error.v0.models.GenericError])
    }

    final case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}