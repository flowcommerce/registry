/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.12
 * apidoc:0.11.27 http://www.apidoc.me/flow/common/0.0.12/play_2_4_client
 */
package io.flow.common.v0.models {

  sealed trait ExpandableLocation

  sealed trait ExpandableOrganization

  sealed trait ExpandableUser

  /**
   * Defines structured fields for a contact person. Typically used for specifying
   * contact person for an account, shipment, or organization representative
   */
  case class Contact(
    name: io.flow.common.v0.models.Name,
    email: _root_.scala.Option[String] = None,
    phone: _root_.scala.Option[String] = None
  )

  case class DatetimeRange(
    from: _root_.org.joda.time.DateTime,
    to: _root_.org.joda.time.DateTime
  )

  case class Dimension(
    `type`: io.flow.common.v0.models.DimensionType,
    depth: _root_.scala.Option[io.flow.common.v0.models.Measurement] = None,
    length: _root_.scala.Option[io.flow.common.v0.models.Measurement] = None,
    weight: _root_.scala.Option[io.flow.common.v0.models.Measurement] = None,
    width: _root_.scala.Option[io.flow.common.v0.models.Measurement] = None
  )

  case class Error(
    code: String,
    message: String
  )

  /**
   * Represents an exception to the schedule of a location.
   */
  case class Exception(
    `type`: io.flow.common.v0.models.ExceptionType,
    datetimeRange: io.flow.common.v0.models.DatetimeRange
  )

  /**
   * Some important fields related to experiences used in various APIs
   */
  case class ExperienceSummary(
    id: String,
    key: String,
    name: String,
    currency: _root_.scala.Option[String] = None,
    country: _root_.scala.Option[String] = None
  )

  case class Healthcheck(
    status: String
  )

  /**
   * Defines structured fields for address to be used in user/form input. Either text
   * or the structured input needs to be present.
   */
  case class Location(
    text: _root_.scala.Option[String] = None,
    streets: _root_.scala.Option[Seq[String]] = None,
    city: _root_.scala.Option[String] = None,
    province: _root_.scala.Option[String] = None,
    postal: _root_.scala.Option[String] = None,
    country: _root_.scala.Option[String] = None,
    latitude: _root_.scala.Option[String] = None,
    longitude: _root_.scala.Option[String] = None
  ) extends ExpandableLocation

  case class LocationReference(
    text: _root_.scala.Option[String] = None
  ) extends ExpandableLocation

  case class Measurement(
    value: String,
    units: io.flow.common.v0.models.UnitOfMeasurement
  )

  case class Name(
    first: _root_.scala.Option[String] = None,
    last: _root_.scala.Option[String] = None
  )

  /**
   * Represents a single organization in the system
   */
  case class Organization(
    id: String,
    name: String
  ) extends ExpandableOrganization

  case class OrganizationReference(
    id: String
  ) extends ExpandableOrganization

  case class OrganizationSummary(
    id: String,
    name: String
  )

  /**
   * Represents operating calendar and holidays of a location
   */
  case class Schedule(
    calendar: _root_.scala.Option[io.flow.common.v0.models.Calendar] = None,
    holiday: io.flow.common.v0.models.HolidayCalendar,
    exception: Seq[io.flow.common.v0.models.Exception],
    cutoff: _root_.scala.Option[String] = None
  )

  /**
   * Represents a single user in the system
   */
  case class User(
    id: String,
    email: _root_.scala.Option[String] = None,
    name: io.flow.common.v0.models.Name
  ) extends ExpandableUser

  case class UserReference(
    id: String
  ) extends ExpandableUser

  case class UserSummary(
    id: String,
    email: _root_.scala.Option[String] = None,
    name: String
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union ExpandableLocation, it will need to be handled in the client code.
   * This implementation will deserialize these future types as an instance of this
   * class.
   */
  case class ExpandableLocationUndefinedType(
    description: String
  ) extends ExpandableLocation

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union ExpandableOrganization, it will need to be handled in the client
   * code. This implementation will deserialize these future types as an instance of
   * this class.
   */
  case class ExpandableOrganizationUndefinedType(
    description: String
  ) extends ExpandableOrganization

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union ExpandableUser, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class ExpandableUserUndefinedType(
    description: String
  ) extends ExpandableUser

  sealed trait Calendar

  object Calendar {

    /**
     * Mon - Fri
     */
    case object Weekdays extends Calendar { override def toString = "weekdays" }
    /**
     * 7 days per week
     */
    case object Everyday extends Calendar { override def toString = "everyday" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Calendar

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Weekdays, Everyday)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Calendar = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Calendar] = byName.get(value.toLowerCase)

  }

  sealed trait Capability

  object Capability {

    case object Crossdock extends Capability { override def toString = "crossdock" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Capability

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Crossdock)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Capability = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Capability] = byName.get(value.toLowerCase)

  }

  sealed trait ChangeType

  object ChangeType {

    case object Insert extends ChangeType { override def toString = "insert" }
    case object Update extends ChangeType { override def toString = "update" }
    case object Delete extends ChangeType { override def toString = "delete" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ChangeType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Insert, Update, Delete)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ChangeType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ChangeType] = byName.get(value.toLowerCase)

  }

  /**
   * Specifies the difference between product dimensions and the actual packaged
   * dimensions. This enables us to generate more accurate shipping estimates based
   * on the packaged dimensions. The common example is a scarf which may have product
   * dimensions of 6 feet long even though it can be folded to have very small
   * package dimensions.
   */
  sealed trait DimensionType

  object DimensionType {

    /**
     * The standalone dimensions of an item.
     */
    case object Product extends DimensionType { override def toString = "product" }
    /**
     * The boxed dimensions of an item.
     */
    case object Package extends DimensionType { override def toString = "package" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends DimensionType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Product, Package)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): DimensionType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[DimensionType] = byName.get(value.toLowerCase)

  }

  sealed trait ExceptionType

  object ExceptionType {

    case object Open extends ExceptionType { override def toString = "open" }
    case object Closed extends ExceptionType { override def toString = "closed" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ExceptionType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Open, Closed)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ExceptionType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ExceptionType] = byName.get(value.toLowerCase)

  }

  sealed trait HolidayCalendar

  object HolidayCalendar {

    case object UsBankHolidays extends HolidayCalendar { override def toString = "us_bank_holidays" }
    case object JewishHolidays extends HolidayCalendar { override def toString = "jewish_holidays" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends HolidayCalendar

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(UsBankHolidays, JewishHolidays)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): HolidayCalendar = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[HolidayCalendar] = byName.get(value.toLowerCase)

  }

  /**
   * Pending better name
   */
  sealed trait ScheduleExceptionStatus

  object ScheduleExceptionStatus {

    case object Open extends ScheduleExceptionStatus { override def toString = "Open" }
    case object Closed extends ScheduleExceptionStatus { override def toString = "Closed" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ScheduleExceptionStatus

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Open, Closed)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ScheduleExceptionStatus = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ScheduleExceptionStatus] = byName.get(value.toLowerCase)

  }

  sealed trait SortDirection

  object SortDirection {

    case object Ascending extends SortDirection { override def toString = "ascending" }
    case object Descending extends SortDirection { override def toString = "descending" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends SortDirection

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Ascending, Descending)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): SortDirection = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[SortDirection] = byName.get(value.toLowerCase)

  }

  /**
   * Defines the units of measurement that we support. As units are added, we conform
   * with the standard units provided by jscience as part of JSR 363 - see
   * http://jscience.org/api/javax/measure/unit/SI.html and
   * http://jscience.org/api/javax/measure/unit/NonSI.html
   */
  sealed trait UnitOfMeasurement

  object UnitOfMeasurement {

    /**
     * Equivalent to MILLI(METRE).
     */
    case object Millimeter extends UnitOfMeasurement { override def toString = "millimeter" }
    /**
     * Equivalent to CENTI(METRE).
     */
    case object Centimeter extends UnitOfMeasurement { override def toString = "centimeter" }
    /**
     * A unit of length equal to 0.01004 m (standard name in).
     */
    case object Inch extends UnitOfMeasurement { override def toString = "inch" }
    /**
     * A unit of length equal to 0.3048 m (standard name ft).
     */
    case object Foot extends UnitOfMeasurement { override def toString = "foot" }
    /**
     * A unit of volume equal to one cubic inch (in³).
     */
    case object CubicInch extends UnitOfMeasurement { override def toString = "cubic_inch" }
    /**
     * The metric unit for volume quantities (m³).
     */
    case object CubicMeter extends UnitOfMeasurement { override def toString = "cubic_meter" }
    /**
     * A unit of mass equal to 1 / 1000 kilogram (standard name g).
     */
    case object Gram extends UnitOfMeasurement { override def toString = "gram" }
    /**
     * The base unit for mass quantities (kg).
     */
    case object Kilogram extends UnitOfMeasurement { override def toString = "kilogram" }
    /**
     * The base unit for length quantities (m).
     */
    case object Meter extends UnitOfMeasurement { override def toString = "meter" }
    /**
     * A unit of mass equal to 1 / 16 POUND (standard name oz).
     */
    case object Ounce extends UnitOfMeasurement { override def toString = "ounce" }
    /**
     * A unit of mass equal to 453.59237 grams (avoirdupois pound, standard name lb).
     */
    case object Pound extends UnitOfMeasurement { override def toString = "pound" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends UnitOfMeasurement

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Millimeter, Centimeter, Inch, Foot, CubicInch, CubicMeter, Gram, Kilogram, Meter, Ounce, Pound)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): UnitOfMeasurement = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[UnitOfMeasurement] = byName.get(value.toLowerCase)

  }

  /**
   * Defines the units of time that we support. We confirm with the standard set of
   * units of time from
   * http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html
   */
  sealed trait UnitOfTime

  object UnitOfTime {

    case object Day extends UnitOfTime { override def toString = "day" }
    case object Hour extends UnitOfTime { override def toString = "hour" }
    case object Minute extends UnitOfTime { override def toString = "minute" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends UnitOfTime

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Day, Hour, Minute)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): UnitOfTime = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[UnitOfTime] = byName.get(value.toLowerCase)

  }

  sealed trait ValueAddedService

  object ValueAddedService {

    /**
     * See https://en.wikipedia.org/wiki/ORM-D
     */
    case object HazardousMaterial extends ValueAddedService { override def toString = "Hazardous Material" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ValueAddedService

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(HazardousMaterial)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ValueAddedService = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ValueAddedService] = byName.get(value.toLowerCase)

  }

  sealed trait Visibility

  object Visibility {

    case object Public extends Visibility { override def toString = "public" }
    case object Private extends Visibility { override def toString = "private" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Visibility

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Public, Private)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Visibility = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Visibility] = byName.get(value.toLowerCase)

  }

}

package io.flow.common.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsCommonCalendar = new play.api.libs.json.Reads[io.flow.common.v0.models.Calendar] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.Calendar] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Calendar(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Calendar(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonCalendar(obj: io.flow.common.v0.models.Calendar) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectCalendar(obj: io.flow.common.v0.models.Calendar) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonCalendar: play.api.libs.json.Writes[Calendar] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Calendar] {
        def writes(obj: io.flow.common.v0.models.Calendar) = {
          jsonWritesCommonCalendar(obj)
        }
      }
    }

    implicit val jsonReadsCommonCapability = new play.api.libs.json.Reads[io.flow.common.v0.models.Capability] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.Capability] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Capability(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Capability(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonCapability(obj: io.flow.common.v0.models.Capability) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectCapability(obj: io.flow.common.v0.models.Capability) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonCapability: play.api.libs.json.Writes[Capability] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Capability] {
        def writes(obj: io.flow.common.v0.models.Capability) = {
          jsonWritesCommonCapability(obj)
        }
      }
    }

    implicit val jsonReadsCommonChangeType = new play.api.libs.json.Reads[io.flow.common.v0.models.ChangeType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.ChangeType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ChangeType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ChangeType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonChangeType(obj: io.flow.common.v0.models.ChangeType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectChangeType(obj: io.flow.common.v0.models.ChangeType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonChangeType: play.api.libs.json.Writes[ChangeType] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ChangeType] {
        def writes(obj: io.flow.common.v0.models.ChangeType) = {
          jsonWritesCommonChangeType(obj)
        }
      }
    }

    implicit val jsonReadsCommonDimensionType = new play.api.libs.json.Reads[io.flow.common.v0.models.DimensionType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.DimensionType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.DimensionType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.DimensionType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonDimensionType(obj: io.flow.common.v0.models.DimensionType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectDimensionType(obj: io.flow.common.v0.models.DimensionType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonDimensionType: play.api.libs.json.Writes[DimensionType] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.DimensionType] {
        def writes(obj: io.flow.common.v0.models.DimensionType) = {
          jsonWritesCommonDimensionType(obj)
        }
      }
    }

    implicit val jsonReadsCommonExceptionType = new play.api.libs.json.Reads[io.flow.common.v0.models.ExceptionType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.ExceptionType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ExceptionType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ExceptionType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonExceptionType(obj: io.flow.common.v0.models.ExceptionType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectExceptionType(obj: io.flow.common.v0.models.ExceptionType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonExceptionType: play.api.libs.json.Writes[ExceptionType] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ExceptionType] {
        def writes(obj: io.flow.common.v0.models.ExceptionType) = {
          jsonWritesCommonExceptionType(obj)
        }
      }
    }

    implicit val jsonReadsCommonHolidayCalendar = new play.api.libs.json.Reads[io.flow.common.v0.models.HolidayCalendar] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.HolidayCalendar] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.HolidayCalendar(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.HolidayCalendar(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonHolidayCalendar(obj: io.flow.common.v0.models.HolidayCalendar) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectHolidayCalendar(obj: io.flow.common.v0.models.HolidayCalendar) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonHolidayCalendar: play.api.libs.json.Writes[HolidayCalendar] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.HolidayCalendar] {
        def writes(obj: io.flow.common.v0.models.HolidayCalendar) = {
          jsonWritesCommonHolidayCalendar(obj)
        }
      }
    }

    implicit val jsonReadsCommonScheduleExceptionStatus = new play.api.libs.json.Reads[io.flow.common.v0.models.ScheduleExceptionStatus] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.ScheduleExceptionStatus] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ScheduleExceptionStatus(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ScheduleExceptionStatus(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonScheduleExceptionStatus(obj: io.flow.common.v0.models.ScheduleExceptionStatus) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectScheduleExceptionStatus(obj: io.flow.common.v0.models.ScheduleExceptionStatus) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonScheduleExceptionStatus: play.api.libs.json.Writes[ScheduleExceptionStatus] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ScheduleExceptionStatus] {
        def writes(obj: io.flow.common.v0.models.ScheduleExceptionStatus) = {
          jsonWritesCommonScheduleExceptionStatus(obj)
        }
      }
    }

    implicit val jsonReadsCommonSortDirection = new play.api.libs.json.Reads[io.flow.common.v0.models.SortDirection] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.SortDirection] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.SortDirection(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.SortDirection(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonSortDirection(obj: io.flow.common.v0.models.SortDirection) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectSortDirection(obj: io.flow.common.v0.models.SortDirection) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonSortDirection: play.api.libs.json.Writes[SortDirection] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.SortDirection] {
        def writes(obj: io.flow.common.v0.models.SortDirection) = {
          jsonWritesCommonSortDirection(obj)
        }
      }
    }

    implicit val jsonReadsCommonUnitOfMeasurement = new play.api.libs.json.Reads[io.flow.common.v0.models.UnitOfMeasurement] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.UnitOfMeasurement] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.UnitOfMeasurement(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.UnitOfMeasurement(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonUnitOfMeasurement(obj: io.flow.common.v0.models.UnitOfMeasurement) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectUnitOfMeasurement(obj: io.flow.common.v0.models.UnitOfMeasurement) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonUnitOfMeasurement: play.api.libs.json.Writes[UnitOfMeasurement] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.UnitOfMeasurement] {
        def writes(obj: io.flow.common.v0.models.UnitOfMeasurement) = {
          jsonWritesCommonUnitOfMeasurement(obj)
        }
      }
    }

    implicit val jsonReadsCommonUnitOfTime = new play.api.libs.json.Reads[io.flow.common.v0.models.UnitOfTime] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.UnitOfTime] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.UnitOfTime(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.UnitOfTime(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonUnitOfTime(obj: io.flow.common.v0.models.UnitOfTime) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectUnitOfTime(obj: io.flow.common.v0.models.UnitOfTime) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonUnitOfTime: play.api.libs.json.Writes[UnitOfTime] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.UnitOfTime] {
        def writes(obj: io.flow.common.v0.models.UnitOfTime) = {
          jsonWritesCommonUnitOfTime(obj)
        }
      }
    }

    implicit val jsonReadsCommonValueAddedService = new play.api.libs.json.Reads[io.flow.common.v0.models.ValueAddedService] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.ValueAddedService] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ValueAddedService(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ValueAddedService(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonValueAddedService(obj: io.flow.common.v0.models.ValueAddedService) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectValueAddedService(obj: io.flow.common.v0.models.ValueAddedService) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonValueAddedService: play.api.libs.json.Writes[ValueAddedService] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ValueAddedService] {
        def writes(obj: io.flow.common.v0.models.ValueAddedService) = {
          jsonWritesCommonValueAddedService(obj)
        }
      }
    }

    implicit val jsonReadsCommonVisibility = new play.api.libs.json.Reads[io.flow.common.v0.models.Visibility] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.Visibility] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Visibility(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Visibility(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonVisibility(obj: io.flow.common.v0.models.Visibility) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectVisibility(obj: io.flow.common.v0.models.Visibility) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonVisibility: play.api.libs.json.Writes[Visibility] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Visibility] {
        def writes(obj: io.flow.common.v0.models.Visibility) = {
          jsonWritesCommonVisibility(obj)
        }
      }
    }

    implicit def jsonReadsCommonContact: play.api.libs.json.Reads[Contact] = {
      (
        (__ \ "name").read[io.flow.common.v0.models.Name] and
        (__ \ "email").readNullable[String] and
        (__ \ "phone").readNullable[String]
      )(Contact.apply _)
    }

    def jsObjectContact(obj: io.flow.common.v0.models.Contact) = {
      play.api.libs.json.Json.obj(
        "name" -> jsObjectName(obj.name)
      ) ++ (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.phone match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("phone" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesCommonContact: play.api.libs.json.Writes[Contact] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Contact] {
        def writes(obj: io.flow.common.v0.models.Contact) = {
          jsObjectContact(obj)
        }
      }
    }

    implicit def jsonReadsCommonDatetimeRange: play.api.libs.json.Reads[DatetimeRange] = {
      (
        (__ \ "from").read[_root_.org.joda.time.DateTime] and
        (__ \ "to").read[_root_.org.joda.time.DateTime]
      )(DatetimeRange.apply _)
    }

    def jsObjectDatetimeRange(obj: io.flow.common.v0.models.DatetimeRange) = {
      play.api.libs.json.Json.obj(
        "from" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.from)),
        "to" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.to))
      )
    }

    implicit def jsonWritesCommonDatetimeRange: play.api.libs.json.Writes[DatetimeRange] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.DatetimeRange] {
        def writes(obj: io.flow.common.v0.models.DatetimeRange) = {
          jsObjectDatetimeRange(obj)
        }
      }
    }

    implicit def jsonReadsCommonDimension: play.api.libs.json.Reads[Dimension] = {
      (
        (__ \ "type").read[io.flow.common.v0.models.DimensionType] and
        (__ \ "depth").readNullable[io.flow.common.v0.models.Measurement] and
        (__ \ "length").readNullable[io.flow.common.v0.models.Measurement] and
        (__ \ "weight").readNullable[io.flow.common.v0.models.Measurement] and
        (__ \ "width").readNullable[io.flow.common.v0.models.Measurement]
      )(Dimension.apply _)
    }

    def jsObjectDimension(obj: io.flow.common.v0.models.Dimension) = {
      play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.JsString(obj.`type`.toString)
      ) ++ (obj.depth match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("depth" -> jsObjectMeasurement(x))
      }) ++
      (obj.length match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("length" -> jsObjectMeasurement(x))
      }) ++
      (obj.weight match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("weight" -> jsObjectMeasurement(x))
      }) ++
      (obj.width match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("width" -> jsObjectMeasurement(x))
      })
    }

    implicit def jsonWritesCommonDimension: play.api.libs.json.Writes[Dimension] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Dimension] {
        def writes(obj: io.flow.common.v0.models.Dimension) = {
          jsObjectDimension(obj)
        }
      }
    }

    implicit def jsonReadsCommonError: play.api.libs.json.Reads[Error] = {
      (
        (__ \ "code").read[String] and
        (__ \ "message").read[String]
      )(Error.apply _)
    }

    def jsObjectError(obj: io.flow.common.v0.models.Error) = {
      play.api.libs.json.Json.obj(
        "code" -> play.api.libs.json.JsString(obj.code),
        "message" -> play.api.libs.json.JsString(obj.message)
      )
    }

    implicit def jsonWritesCommonError: play.api.libs.json.Writes[Error] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Error] {
        def writes(obj: io.flow.common.v0.models.Error) = {
          jsObjectError(obj)
        }
      }
    }

    implicit def jsonReadsCommonException: play.api.libs.json.Reads[Exception] = {
      (
        (__ \ "type").read[io.flow.common.v0.models.ExceptionType] and
        (__ \ "datetime_range").read[io.flow.common.v0.models.DatetimeRange]
      )(Exception.apply _)
    }

    def jsObjectException(obj: io.flow.common.v0.models.Exception) = {
      play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "datetime_range" -> jsObjectDatetimeRange(obj.datetimeRange)
      )
    }

    implicit def jsonWritesCommonException: play.api.libs.json.Writes[Exception] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Exception] {
        def writes(obj: io.flow.common.v0.models.Exception) = {
          jsObjectException(obj)
        }
      }
    }

    implicit def jsonReadsCommonExperienceSummary: play.api.libs.json.Reads[ExperienceSummary] = {
      (
        (__ \ "id").read[String] and
        (__ \ "key").read[String] and
        (__ \ "name").read[String] and
        (__ \ "currency").readNullable[String] and
        (__ \ "country").readNullable[String]
      )(ExperienceSummary.apply _)
    }

    def jsObjectExperienceSummary(obj: io.flow.common.v0.models.ExperienceSummary) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "key" -> play.api.libs.json.JsString(obj.key),
        "name" -> play.api.libs.json.JsString(obj.name)
      ) ++ (obj.currency match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("currency" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.country match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("country" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesCommonExperienceSummary: play.api.libs.json.Writes[ExperienceSummary] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ExperienceSummary] {
        def writes(obj: io.flow.common.v0.models.ExperienceSummary) = {
          jsObjectExperienceSummary(obj)
        }
      }
    }

    implicit def jsonReadsCommonHealthcheck: play.api.libs.json.Reads[Healthcheck] = {
      (__ \ "status").read[String].map { x => new Healthcheck(status = x) }
    }

    def jsObjectHealthcheck(obj: io.flow.common.v0.models.Healthcheck) = {
      play.api.libs.json.Json.obj(
        "status" -> play.api.libs.json.JsString(obj.status)
      )
    }

    implicit def jsonWritesCommonHealthcheck: play.api.libs.json.Writes[Healthcheck] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Healthcheck] {
        def writes(obj: io.flow.common.v0.models.Healthcheck) = {
          jsObjectHealthcheck(obj)
        }
      }
    }

    implicit def jsonReadsCommonLocation: play.api.libs.json.Reads[Location] = {
      (
        (__ \ "text").readNullable[String] and
        (__ \ "streets").readNullable[Seq[String]] and
        (__ \ "city").readNullable[String] and
        (__ \ "province").readNullable[String] and
        (__ \ "postal").readNullable[String] and
        (__ \ "country").readNullable[String] and
        (__ \ "latitude").readNullable[String] and
        (__ \ "longitude").readNullable[String]
      )(Location.apply _)
    }

    def jsObjectLocation(obj: io.flow.common.v0.models.Location) = {
      (obj.text match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("text" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.streets match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("streets" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.city match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("city" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.province match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("province" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.postal match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("postal" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.country match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("country" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.latitude match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("latitude" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.longitude match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("longitude" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsCommonLocationReference: play.api.libs.json.Reads[LocationReference] = {
      (__ \ "text").readNullable[String].map { x => new LocationReference(text = x) }
    }

    def jsObjectLocationReference(obj: io.flow.common.v0.models.LocationReference) = {
      (obj.text match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("text" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsCommonMeasurement: play.api.libs.json.Reads[Measurement] = {
      (
        (__ \ "value").read[String] and
        (__ \ "units").read[io.flow.common.v0.models.UnitOfMeasurement]
      )(Measurement.apply _)
    }

    def jsObjectMeasurement(obj: io.flow.common.v0.models.Measurement) = {
      play.api.libs.json.Json.obj(
        "value" -> play.api.libs.json.JsString(obj.value),
        "units" -> play.api.libs.json.JsString(obj.units.toString)
      )
    }

    implicit def jsonWritesCommonMeasurement: play.api.libs.json.Writes[Measurement] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Measurement] {
        def writes(obj: io.flow.common.v0.models.Measurement) = {
          jsObjectMeasurement(obj)
        }
      }
    }

    implicit def jsonReadsCommonName: play.api.libs.json.Reads[Name] = {
      (
        (__ \ "first").readNullable[String] and
        (__ \ "last").readNullable[String]
      )(Name.apply _)
    }

    def jsObjectName(obj: io.flow.common.v0.models.Name) = {
      (obj.first match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("first" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.last match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("last" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesCommonName: play.api.libs.json.Writes[Name] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Name] {
        def writes(obj: io.flow.common.v0.models.Name) = {
          jsObjectName(obj)
        }
      }
    }

    implicit def jsonReadsCommonOrganization: play.api.libs.json.Reads[Organization] = {
      (
        (__ \ "id").read[String] and
        (__ \ "name").read[String]
      )(Organization.apply _)
    }

    def jsObjectOrganization(obj: io.flow.common.v0.models.Organization) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonReadsCommonOrganizationReference: play.api.libs.json.Reads[OrganizationReference] = {
      (__ \ "id").read[String].map { x => new OrganizationReference(id = x) }
    }

    def jsObjectOrganizationReference(obj: io.flow.common.v0.models.OrganizationReference) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonReadsCommonOrganizationSummary: play.api.libs.json.Reads[OrganizationSummary] = {
      (
        (__ \ "id").read[String] and
        (__ \ "name").read[String]
      )(OrganizationSummary.apply _)
    }

    def jsObjectOrganizationSummary(obj: io.flow.common.v0.models.OrganizationSummary) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesCommonOrganizationSummary: play.api.libs.json.Writes[OrganizationSummary] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.OrganizationSummary] {
        def writes(obj: io.flow.common.v0.models.OrganizationSummary) = {
          jsObjectOrganizationSummary(obj)
        }
      }
    }

    implicit def jsonReadsCommonSchedule: play.api.libs.json.Reads[Schedule] = {
      (
        (__ \ "calendar").readNullable[io.flow.common.v0.models.Calendar] and
        (__ \ "holiday").read[io.flow.common.v0.models.HolidayCalendar] and
        (__ \ "exception").read[Seq[io.flow.common.v0.models.Exception]] and
        (__ \ "cutoff").readNullable[String]
      )(Schedule.apply _)
    }

    def jsObjectSchedule(obj: io.flow.common.v0.models.Schedule) = {
      play.api.libs.json.Json.obj(
        "holiday" -> play.api.libs.json.JsString(obj.holiday.toString),
        "exception" -> play.api.libs.json.Json.toJson(obj.exception)
      ) ++ (obj.calendar match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("calendar" -> play.api.libs.json.JsString(x.toString))
      }) ++
      (obj.cutoff match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("cutoff" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesCommonSchedule: play.api.libs.json.Writes[Schedule] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Schedule] {
        def writes(obj: io.flow.common.v0.models.Schedule) = {
          jsObjectSchedule(obj)
        }
      }
    }

    implicit def jsonReadsCommonUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "id").read[String] and
        (__ \ "email").readNullable[String] and
        (__ \ "name").read[io.flow.common.v0.models.Name]
      )(User.apply _)
    }

    def jsObjectUser(obj: io.flow.common.v0.models.User) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> jsObjectName(obj.name)
      ) ++ (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsCommonUserReference: play.api.libs.json.Reads[UserReference] = {
      (__ \ "id").read[String].map { x => new UserReference(id = x) }
    }

    def jsObjectUserReference(obj: io.flow.common.v0.models.UserReference) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonReadsCommonUserSummary: play.api.libs.json.Reads[UserSummary] = {
      (
        (__ \ "id").read[String] and
        (__ \ "email").readNullable[String] and
        (__ \ "name").read[String]
      )(UserSummary.apply _)
    }

    def jsObjectUserSummary(obj: io.flow.common.v0.models.UserSummary) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name)
      ) ++ (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesCommonUserSummary: play.api.libs.json.Writes[UserSummary] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.UserSummary] {
        def writes(obj: io.flow.common.v0.models.UserSummary) = {
          jsObjectUserSummary(obj)
        }
      }
    }

    implicit def jsonReadsCommonExpandableLocation: play.api.libs.json.Reads[ExpandableLocation] = new play.api.libs.json.Reads[ExpandableLocation] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[ExpandableLocation] = {
        (js \ "discriminator").validate[String] match {
          case play.api.libs.json.JsError(msg) => play.api.libs.json.JsError(msg)
          case play.api.libs.json.JsSuccess(discriminator, _) => {
            discriminator match {
              case "location" => js.validate[io.flow.common.v0.models.Location]
              case "location_reference" => js.validate[io.flow.common.v0.models.LocationReference]
              case other => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ExpandableLocationUndefinedType(other))
            }
          }
        }
      }
    }

    def jsObjectExpandableLocation(obj: io.flow.common.v0.models.ExpandableLocation) = {
      obj match {
        case x: io.flow.common.v0.models.Location => jsObjectLocation(x) ++ play.api.libs.json.Json.obj("discriminator" -> "location")
        case x: io.flow.common.v0.models.LocationReference => jsObjectLocationReference(x) ++ play.api.libs.json.Json.obj("discriminator" -> "location_reference")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesCommonExpandableLocation: play.api.libs.json.Writes[ExpandableLocation] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ExpandableLocation] {
        def writes(obj: io.flow.common.v0.models.ExpandableLocation) = {
          jsObjectExpandableLocation(obj)
        }
      }
    }

    implicit def jsonReadsCommonExpandableOrganization: play.api.libs.json.Reads[ExpandableOrganization] = new play.api.libs.json.Reads[ExpandableOrganization] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[ExpandableOrganization] = {
        (js \ "discriminator").validate[String] match {
          case play.api.libs.json.JsError(msg) => play.api.libs.json.JsError(msg)
          case play.api.libs.json.JsSuccess(discriminator, _) => {
            discriminator match {
              case "organization" => js.validate[io.flow.common.v0.models.Organization]
              case "organization_reference" => js.validate[io.flow.common.v0.models.OrganizationReference]
              case other => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ExpandableOrganizationUndefinedType(other))
            }
          }
        }
      }
    }

    def jsObjectExpandableOrganization(obj: io.flow.common.v0.models.ExpandableOrganization) = {
      obj match {
        case x: io.flow.common.v0.models.Organization => jsObjectOrganization(x) ++ play.api.libs.json.Json.obj("discriminator" -> "organization")
        case x: io.flow.common.v0.models.OrganizationReference => jsObjectOrganizationReference(x) ++ play.api.libs.json.Json.obj("discriminator" -> "organization_reference")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesCommonExpandableOrganization: play.api.libs.json.Writes[ExpandableOrganization] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ExpandableOrganization] {
        def writes(obj: io.flow.common.v0.models.ExpandableOrganization) = {
          jsObjectExpandableOrganization(obj)
        }
      }
    }

    implicit def jsonReadsCommonExpandableUser: play.api.libs.json.Reads[ExpandableUser] = new play.api.libs.json.Reads[ExpandableUser] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[ExpandableUser] = {
        (js \ "discriminator").validate[String] match {
          case play.api.libs.json.JsError(msg) => play.api.libs.json.JsError(msg)
          case play.api.libs.json.JsSuccess(discriminator, _) => {
            discriminator match {
              case "user" => js.validate[io.flow.common.v0.models.User]
              case "user_reference" => js.validate[io.flow.common.v0.models.UserReference]
              case other => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ExpandableUserUndefinedType(other))
            }
          }
        }
      }
    }

    def jsObjectExpandableUser(obj: io.flow.common.v0.models.ExpandableUser) = {
      obj match {
        case x: io.flow.common.v0.models.User => jsObjectUser(x) ++ play.api.libs.json.Json.obj("discriminator" -> "user")
        case x: io.flow.common.v0.models.UserReference => jsObjectUserReference(x) ++ play.api.libs.json.Json.obj("discriminator" -> "user_reference")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesCommonExpandableUser: play.api.libs.json.Writes[ExpandableUser] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ExpandableUser] {
        def writes(obj: io.flow.common.v0.models.ExpandableUser) = {
          jsObjectExpandableUser(obj)
        }
      }
    }
  }
}

package io.flow.common.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.common.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: Calendar
    private[this] val enumCalendarNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.Calendar.all.mkString(", ")}"

    implicit val pathBindableEnumCalendar = new PathBindable.Parsing[io.flow.common.v0.models.Calendar] (
      Calendar.fromString(_).get, _.toString, enumCalendarNotFound
    )

    implicit val queryStringBindableEnumCalendar = new QueryStringBindable.Parsing[io.flow.common.v0.models.Calendar](
      Calendar.fromString(_).get, _.toString, enumCalendarNotFound
    )

    // Enum: Capability
    private[this] val enumCapabilityNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.Capability.all.mkString(", ")}"

    implicit val pathBindableEnumCapability = new PathBindable.Parsing[io.flow.common.v0.models.Capability] (
      Capability.fromString(_).get, _.toString, enumCapabilityNotFound
    )

    implicit val queryStringBindableEnumCapability = new QueryStringBindable.Parsing[io.flow.common.v0.models.Capability](
      Capability.fromString(_).get, _.toString, enumCapabilityNotFound
    )

    // Enum: ChangeType
    private[this] val enumChangeTypeNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.ChangeType.all.mkString(", ")}"

    implicit val pathBindableEnumChangeType = new PathBindable.Parsing[io.flow.common.v0.models.ChangeType] (
      ChangeType.fromString(_).get, _.toString, enumChangeTypeNotFound
    )

    implicit val queryStringBindableEnumChangeType = new QueryStringBindable.Parsing[io.flow.common.v0.models.ChangeType](
      ChangeType.fromString(_).get, _.toString, enumChangeTypeNotFound
    )

    // Enum: DimensionType
    private[this] val enumDimensionTypeNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.DimensionType.all.mkString(", ")}"

    implicit val pathBindableEnumDimensionType = new PathBindable.Parsing[io.flow.common.v0.models.DimensionType] (
      DimensionType.fromString(_).get, _.toString, enumDimensionTypeNotFound
    )

    implicit val queryStringBindableEnumDimensionType = new QueryStringBindable.Parsing[io.flow.common.v0.models.DimensionType](
      DimensionType.fromString(_).get, _.toString, enumDimensionTypeNotFound
    )

    // Enum: ExceptionType
    private[this] val enumExceptionTypeNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.ExceptionType.all.mkString(", ")}"

    implicit val pathBindableEnumExceptionType = new PathBindable.Parsing[io.flow.common.v0.models.ExceptionType] (
      ExceptionType.fromString(_).get, _.toString, enumExceptionTypeNotFound
    )

    implicit val queryStringBindableEnumExceptionType = new QueryStringBindable.Parsing[io.flow.common.v0.models.ExceptionType](
      ExceptionType.fromString(_).get, _.toString, enumExceptionTypeNotFound
    )

    // Enum: HolidayCalendar
    private[this] val enumHolidayCalendarNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.HolidayCalendar.all.mkString(", ")}"

    implicit val pathBindableEnumHolidayCalendar = new PathBindable.Parsing[io.flow.common.v0.models.HolidayCalendar] (
      HolidayCalendar.fromString(_).get, _.toString, enumHolidayCalendarNotFound
    )

    implicit val queryStringBindableEnumHolidayCalendar = new QueryStringBindable.Parsing[io.flow.common.v0.models.HolidayCalendar](
      HolidayCalendar.fromString(_).get, _.toString, enumHolidayCalendarNotFound
    )

    // Enum: ScheduleExceptionStatus
    private[this] val enumScheduleExceptionStatusNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.ScheduleExceptionStatus.all.mkString(", ")}"

    implicit val pathBindableEnumScheduleExceptionStatus = new PathBindable.Parsing[io.flow.common.v0.models.ScheduleExceptionStatus] (
      ScheduleExceptionStatus.fromString(_).get, _.toString, enumScheduleExceptionStatusNotFound
    )

    implicit val queryStringBindableEnumScheduleExceptionStatus = new QueryStringBindable.Parsing[io.flow.common.v0.models.ScheduleExceptionStatus](
      ScheduleExceptionStatus.fromString(_).get, _.toString, enumScheduleExceptionStatusNotFound
    )

    // Enum: SortDirection
    private[this] val enumSortDirectionNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.SortDirection.all.mkString(", ")}"

    implicit val pathBindableEnumSortDirection = new PathBindable.Parsing[io.flow.common.v0.models.SortDirection] (
      SortDirection.fromString(_).get, _.toString, enumSortDirectionNotFound
    )

    implicit val queryStringBindableEnumSortDirection = new QueryStringBindable.Parsing[io.flow.common.v0.models.SortDirection](
      SortDirection.fromString(_).get, _.toString, enumSortDirectionNotFound
    )

    // Enum: UnitOfMeasurement
    private[this] val enumUnitOfMeasurementNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.UnitOfMeasurement.all.mkString(", ")}"

    implicit val pathBindableEnumUnitOfMeasurement = new PathBindable.Parsing[io.flow.common.v0.models.UnitOfMeasurement] (
      UnitOfMeasurement.fromString(_).get, _.toString, enumUnitOfMeasurementNotFound
    )

    implicit val queryStringBindableEnumUnitOfMeasurement = new QueryStringBindable.Parsing[io.flow.common.v0.models.UnitOfMeasurement](
      UnitOfMeasurement.fromString(_).get, _.toString, enumUnitOfMeasurementNotFound
    )

    // Enum: UnitOfTime
    private[this] val enumUnitOfTimeNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.UnitOfTime.all.mkString(", ")}"

    implicit val pathBindableEnumUnitOfTime = new PathBindable.Parsing[io.flow.common.v0.models.UnitOfTime] (
      UnitOfTime.fromString(_).get, _.toString, enumUnitOfTimeNotFound
    )

    implicit val queryStringBindableEnumUnitOfTime = new QueryStringBindable.Parsing[io.flow.common.v0.models.UnitOfTime](
      UnitOfTime.fromString(_).get, _.toString, enumUnitOfTimeNotFound
    )

    // Enum: ValueAddedService
    private[this] val enumValueAddedServiceNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.ValueAddedService.all.mkString(", ")}"

    implicit val pathBindableEnumValueAddedService = new PathBindable.Parsing[io.flow.common.v0.models.ValueAddedService] (
      ValueAddedService.fromString(_).get, _.toString, enumValueAddedServiceNotFound
    )

    implicit val queryStringBindableEnumValueAddedService = new QueryStringBindable.Parsing[io.flow.common.v0.models.ValueAddedService](
      ValueAddedService.fromString(_).get, _.toString, enumValueAddedServiceNotFound
    )

    // Enum: Visibility
    private[this] val enumVisibilityNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.Visibility.all.mkString(", ")}"

    implicit val pathBindableEnumVisibility = new PathBindable.Parsing[io.flow.common.v0.models.Visibility] (
      Visibility.fromString(_).get, _.toString, enumVisibilityNotFound
    )

    implicit val queryStringBindableEnumVisibility = new QueryStringBindable.Parsing[io.flow.common.v0.models.Visibility](
      Visibility.fromString(_).get, _.toString, enumVisibilityNotFound
    )

  }

}


package io.flow.common.v0 {

  object Constants {

    val BaseUrl = "https://api.flow.io"
    val Namespace = "io.flow.common.v0"
    val UserAgent = "apidoc:0.11.27 http://www.apidoc.me/flow/common/0.0.12/play_2_4_client"
    val Version = "0.0.12"
    val VersionMajor = 0

  }

  class Client(
    val baseUrl: String = "https://api.flow.io",
    auth: scala.Option[io.flow.common.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.common.v0.Client")

    logger.info(s"Initializing io.flow.common.v0.Client for url $baseUrl")

    def healthchecks: Healthchecks = Healthchecks

    object Healthchecks extends Healthchecks {
      override def getHealthcheck(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Healthcheck] = {
        _executeRequest("GET", s"/_internal_/healthcheck", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.common.v0.Client.parseJson("io.flow.common.v0.models.Healthcheck", r, _.validate[io.flow.common.v0.models.Healthcheck])
          case r if r.status == 422 => throw new io.flow.common.v0.errors.ErrorsResponse(r)
          case r => throw new io.flow.common.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 422")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new io.flow.common.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def healthchecks: io.flow.common.v0.Healthchecks
    }

  }

  trait Healthchecks {
    def getHealthcheck(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Healthcheck]
  }

  package errors {

    import io.flow.common.v0.models.json._

    case class ErrorsResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val errors = _root_.io.flow.common.v0.Client.parseJson("Seq[io.flow.common.v0.models.Error]", response, _.validate[Seq[io.flow.common.v0.models.Error]])
    }

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}