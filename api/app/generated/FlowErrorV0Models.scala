/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.1.72
 * apidoc:0.11.37 http://www.apidoc.me/flow/error/0.1.72/play_2_x_json
 */
package io.flow.error.v0.models {

  sealed trait OrderError

  /**
   * When creating an order, if a particular item is not available in the country /
   * destination (either because it was restricted or excluded from that country), we
   * return this error to highlight the specific item numbers which are not
   * available.
   */
  case class OrderItemNotAvailableError(
    messages: Seq[String],
    numbers: Seq[String]
  ) extends OrderError

  /**
   * A validation error of some type has occured. See messages for a detailed
   * description of the specific error or errors
   */
  case class ValidationError(
    messages: Seq[String]
  ) extends OrderError

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union OrderError, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class OrderErrorUndefinedType(
    description: String
  ) extends OrderError

}

package io.flow.error.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.error.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsErrorOrderItemNotAvailableError: play.api.libs.json.Reads[OrderItemNotAvailableError] = {
      (
        (__ \ "messages").read[Seq[String]] and
        (__ \ "numbers").read[Seq[String]]
      )(OrderItemNotAvailableError.apply _)
    }

    def jsObjectOrderItemNotAvailableError(obj: io.flow.error.v0.models.OrderItemNotAvailableError) = {
      play.api.libs.json.Json.obj(
        "messages" -> play.api.libs.json.Json.toJson(obj.messages),
        "numbers" -> play.api.libs.json.Json.toJson(obj.numbers)
      )
    }

    implicit def jsonReadsErrorValidationError: play.api.libs.json.Reads[ValidationError] = {
      (__ \ "messages").read[Seq[String]].map { x => new ValidationError(messages = x) }
    }

    def jsObjectValidationError(obj: io.flow.error.v0.models.ValidationError) = {
      play.api.libs.json.Json.obj(
        "messages" -> play.api.libs.json.Json.toJson(obj.messages)
      )
    }

    implicit def jsonReadsErrorOrderError: play.api.libs.json.Reads[OrderError] = new play.api.libs.json.Reads[OrderError] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[OrderError] = {
        (js \ "code").validate[String] match {
          case play.api.libs.json.JsError(msg) => play.api.libs.json.JsError(msg)
          case play.api.libs.json.JsSuccess(discriminator, _) => {
            discriminator match {
              case "order_item_not_available_error" => js.validate[io.flow.error.v0.models.OrderItemNotAvailableError]
              case "validation_error" => js.validate[io.flow.error.v0.models.ValidationError]
              case other => play.api.libs.json.JsSuccess(io.flow.error.v0.models.OrderErrorUndefinedType(other))
            }
          }
        }
      }
    }

    def jsObjectOrderError(obj: io.flow.error.v0.models.OrderError) = {
      obj match {
        case x: io.flow.error.v0.models.OrderItemNotAvailableError => jsObjectOrderItemNotAvailableError(x) ++ play.api.libs.json.Json.obj("code" -> "order_item_not_available_error")
        case x: io.flow.error.v0.models.ValidationError => jsObjectValidationError(x) ++ play.api.libs.json.Json.obj("code" -> "validation_error")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesErrorOrderError: play.api.libs.json.Writes[OrderError] = {
      new play.api.libs.json.Writes[io.flow.error.v0.models.OrderError] {
        def writes(obj: io.flow.error.v0.models.OrderError) = {
          jsObjectOrderError(obj)
        }
      }
    }
  }
}

package io.flow.error.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.error.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}
